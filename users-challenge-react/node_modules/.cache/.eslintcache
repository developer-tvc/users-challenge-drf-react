[{"/home/anish/Documents/workspace/users-challenge/src/index.js":"1","/home/anish/Documents/workspace/users-challenge/src/App.js":"2","/home/anish/Documents/workspace/users-challenge/src/reportWebVitals.js":"3","/home/anish/Documents/workspace/challenge/users-challenge-react/src/index.js":"4","/home/anish/Documents/workspace/challenge/users-challenge-react/src/reportWebVitals.js":"5","/home/anish/Documents/workspace/challenge/users-challenge-react/src/App.js":"6","/home/anish/Documents/workspace/challenge/users-challenge-react/src/store/index.js":"7","/home/anish/Documents/workspace/challenge/users-challenge-react/src/router/index.js":"8","/home/anish/Documents/workspace/challenge/users-challenge-react/src/component/List.js":"9","/home/anish/Documents/workspace/challenge/users-challenge-react/src/redux/reducer/index.js":"10","/home/anish/Documents/workspace/challenge/users-challenge-react/src/redux/action/updateListActionComponent.js":"11","/home/anish/Documents/workspace/challenge/users-challenge-react/src/redux/reducer/updateListReducer.js":"12","/home/anish/Documents/workspace/challenge/users-challenge-react/src/constant/index.js":"13"},{"size":501,"mtime":1634894524812,"results":"14","hashOfConfig":"15"},{"size":2195,"mtime":1634899785642,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1634894047474,"results":"17","hashOfConfig":"15"},{"size":892,"mtime":1634918856824,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1634900852647,"results":"20","hashOfConfig":"19"},{"size":2866,"mtime":1634914598970,"results":"21","hashOfConfig":"19"},{"size":553,"mtime":1634918503970,"results":"22","hashOfConfig":"19"},{"size":398,"mtime":1635182181220,"results":"23","hashOfConfig":"19"},{"size":9628,"mtime":1635185157141,"results":"24","hashOfConfig":"19"},{"size":153,"mtime":1634917346411,"results":"25","hashOfConfig":"19"},{"size":657,"mtime":1635182193028,"results":"26","hashOfConfig":"19"},{"size":480,"mtime":1634917309435,"results":"27","hashOfConfig":"19"},{"size":108,"mtime":1634919596627,"results":"28","hashOfConfig":"19"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},"1184w7",{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"f3zklf",{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"/home/anish/Documents/workspace/users-challenge/src/index.js",[],["58","59"],"/home/anish/Documents/workspace/users-challenge/src/App.js",["60"],"/home/anish/Documents/workspace/users-challenge/src/reportWebVitals.js",[],"/home/anish/Documents/workspace/challenge/users-challenge-react/src/index.js",[],["61","62"],"/home/anish/Documents/workspace/challenge/users-challenge-react/src/reportWebVitals.js",[],"/home/anish/Documents/workspace/challenge/users-challenge-react/src/App.js",["63","64","65","66","67","68"],"/home/anish/Documents/workspace/challenge/users-challenge-react/src/store/index.js",[],"/home/anish/Documents/workspace/challenge/users-challenge-react/src/router/index.js",[],"/home/anish/Documents/workspace/challenge/users-challenge-react/src/component/List.js",["69","70","71","72","73","74"],"import '../App.css';\nimport { SERVER_URL\n} from \"../constant\";\nimport { useSelector,useDispatch,dispatch } from 'react-redux';\nimport { getList } from '../redux/action/updateListActionComponent';\nimport ReactDOM from 'react-dom';\nimport { AddFilled32,CheckmarkFilled24,PauseOutlineFilled24,TrashCan32 } from '@carbon/icons-react';\nimport {\n  DataTable,\n  Table,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableToolbar,\n  TableToolbarContent,\n  TableToolbarSearch,\n  TableSelectAll,\n  TableSelectRow,\n  TableBatchActions,\n  TableBatchAction,\n  Button,\n  ComposedModal,\n  ModalBody,\n  ModalHeader,\n} from 'carbon-components-react';\nimport React, { useState, useEffect } from 'react';\n\n\nfunction addUser(first_name, username, is_active, is_staff, is_superuser,dispatch){\n  const requestOptions = {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(\n      {\n        \"first_name\":first_name,\n        \"username\":username,\n        \"is_superuser\":is_superuser,\n        \"is_staff\":is_staff,\n        \"is_active\":is_active\n      })\n  };\n  fetch(`${SERVER_URL}register/`, requestOptions).then((result)=> {\n    dispatch(getList())\n  })\n  \n\n}\nfunction deleteBatch(act,dispatch){\n  var delete_list = [];\n  act.forEach(function(user){\n    delete_list.push(parseInt(user.id))\n  });\n  const requestOptions = {\n    method: 'DELETE',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(\n      {\n          \"list\":delete_list\n      })\n  };\n  fetch(`${SERVER_URL}delete-user/`, requestOptions).then((result)=> {\n    dispatch(getList())\n  })\n\n}\nfunction deactivateBatch(act, dispatch){\n  var deactivate_list = [];\n  act.forEach(function(user){\n    deactivate_list.push(parseInt(user.id))\n  });\n  const requestOptions = {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(\n      {\n          \"list\":deactivate_list\n      })\n  };\n  fetch(`${SERVER_URL}user-deactivate/`, requestOptions).then((result)=> {\n    dispatch(getList())\n  })\n\n}\nfunction activateBatch(act, dispatch){\n  var activate_list = [];\n  act.forEach(function(user){\n    activate_list.push(parseInt(user.id))\n  });\n  const requestOptions = {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(\n      {\n          \"list\":activate_list\n      })\n  };\n  fetch(`${SERVER_URL}user-activate/`, requestOptions).then((result)=> {\n    dispatch(getList())\n  })\n}\n\nconst headers = [\n  {\n    key: 'first_name',\n    header: 'Name',\n  },\n  {\n    key: 'username',\n    header: 'Username',\n  },\n  {\n    key: 'is_superuser',\n    header: 'Superuser',\n  },\n  {\n    key: 'is_staff',\n    header: 'Staff',\n  },\n  {\n    key: 'is_active',\n    header: 'Active',\n  },\n];\n\n\nconst List = ()=>{\n  const [rows, setRows] = useState([]);\n  const[loading, setLoading] = useState(true);\n  const [open, setOpen] = useState(false);\n  const dispatch = useDispatch()\n  const [name, setName] = useState('')\n  const [uname, setUsername] = useState('')\n  const [isactive, setIsActive] = useState(false);\n  const [isstaff, setIsStaff] = useState(false);\n  const [issuperuser, setIsSuperUSer] = useState(false);\nconst data = useSelector(state=>state.updateListReducer.List)\nuseEffect(()=>{\n\ndispatch(getList())\n}, [])\nuseEffect(()=>{\nsetRows(data)\n}, [data])\n  return (<>\n  {typeof document === 'undefined'\n        ? null\n        : ReactDOM.createPortal(\n            <ComposedModal open={open} onClose={() => setOpen(false)}>\n              <ModalHeader >\n                <h4>\n                  Add New User\n                </h4>\n              </ModalHeader>\n          <ModalBody hasForm>\n          <label style={{ display: 'block' }} for=\"text-input-name\"> Name</label>\n          <input data-modal-primary-focus\n                  id=\"text-input-name\"\n                  onChange={event => setName(event.target.value)}\n                  labelText=\"Name\"\n                  placeholder=\" Eg: Thomas\"\n                  style={{ marginBottom: '1rem', display: 'block', width:'100%' }}/>\n\n\n          <label style={{ display: 'block' }} for=\"text-input-username\"> Username</label>\n          <input  required data-modal-primary-focus\n                  id=\"text-input-username\"\n                  onChange={event => setUsername(event.target.value)}\n                  labelText=\"Username\"\n                  placeholder=\" Eg: thomas\"\n                  style={{ marginBottom: '1rem', display: 'block', width:'100%' }}/>\n       \n\n          <input style={{ display: 'block' }} type=\"checkbox\" onChange={event => setIsSuperUSer(event.target.value)} labelText=\"Superuser\" id=\"checkbox-superuser\" />\n          <label style={{ display: 'block' }} for=\"checkbox-superuser\"> Superuser</label>\n          <input style={{ display: 'block' }} type=\"checkbox\" onChange={event => setIsActive(event.target.value)} labelText=\"Is Active\" id=\"checkbox-isactive\" />\n          <label style={{ display: 'block' }} for=\"checkbox-isactive\"> Active</label>\n          <input style={{ display: 'block' }} type=\"checkbox\" onChange={event => setIsStaff(event.target.value)} labelText=\"Is Staff\" id=\"checkbox-isstaff\" />\n          <label style={{ display: 'block' }} for=\"checkbox-isstaff\"> Staff</label>\n          \n          <Button onClick={() => {addUser(name, uname, isactive, isstaff, issuperuser, dispatch);setOpen(false)}}\n                  size=\"small\"\n                  kind=\"primary\">\n                  Add New User\n          </Button>\n\n          </ModalBody>  \n            </ComposedModal>,\n            document.body\n          )}\n      \n  \n  {rows?.length!==0?\n    <DataTable rows={rows} headers={headers}>\n    {({\n      rows,\n      headers,\n      getHeaderProps,\n      getRowProps,\n      getSelectionProps,\n      getToolbarProps,\n      getBatchActionProps,\n      onInputChange,\n      selectedRows,\n      getTableProps,\n      getTableContainerProps,\n    }) => (\n      \n      <TableContainer title=\"Users\"\n      {...getTableContainerProps()}>\n        <Button\n            style={{ float: 'right' }}\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n            onClick={() => setOpen(true)}\n            renderIcon={AddFilled32}\n            size=\"small\"\n            kind=\"primary\">\n            Add new\n          </Button>\n      <TableToolbar {...getToolbarProps()}>\n        <TableBatchActions persistent=\"true\" {...getBatchActionProps()}>\n          <TableBatchAction\n            persistent=\"true\"\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n            renderIcon={TrashCan32}\n            onClick={() => { deleteBatch(selectedRows, dispatch)}}>\n            Delete\n          </TableBatchAction>\n          <TableBatchAction\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n            renderIcon={CheckmarkFilled24}\n            onClick={() => {activateBatch(selectedRows, dispatch)}}>\n            Activate\n          </TableBatchAction>\n          <TableBatchAction\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n            renderIcon={PauseOutlineFilled24}\n            onClick={() => {deactivateBatch(selectedRows, dispatch)}}>\n            Deactivate\n          </TableBatchAction>\n        </TableBatchActions>\n        <TableToolbarContent>\n          <TableToolbarSearch\n            persistent=\"true\"\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n            onChange={onInputChange}/>\n\n          \n        </TableToolbarContent>\n      </TableToolbar>\n      <Table {...getTableProps()}>\n        <TableHead>\n          <TableRow>\n            <TableSelectAll {...getSelectionProps()} />\n            {headers.map((header, i) => (\n              <TableHeader key={i} {...getHeaderProps({ header, isSortable: true })}>\n                {header.header}\n              </TableHeader>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row, i) => (\n            <TableRow key={i} {...getRowProps({ row })}>\n              <TableSelectRow {...getSelectionProps({ row })} />\n              {row.cells.map((cell) => (\n                <TableCell key={cell.id}>{\n                [true, false].includes(cell.value) ? (cell.value ? (<img  width=\"10\" height=\"10\" src=\"/check.png\" />) : (<img width=\"10\" height=\"10\" src=\"/cancel.png\" />)):cell.value\n              }</TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n    )}\n  </DataTable>\n    :\n    <DataTable rows={rows} headers={headers}>\n    {({\n      headers,\n      getHeaderProps,\n      getSelectionProps,\n      getBatchActionProps,\n      getTableProps,\n      getTableContainerProps,\n    }) => (\n      \n      <TableContainer\n      {...getTableContainerProps()}>\n        <h4>Users</h4>\n        <Button\n            style={{ float: 'right' }}\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n            onClick={() => setOpen(true)}\n            renderIcon={AddFilled32}\n            size=\"small\"\n            kind=\"primary\">\n            Add new\n          </Button>\n      <Table {...getTableProps()}>\n        <TableHead>\n          <TableRow>\n            <TableSelectAll {...getSelectionProps()} />\n            {headers.map((header, i) => (\n              <TableHeader key={i} {...getHeaderProps({ header, isSortable: true })}>\n                {header.header}\n              </TableHeader>\n            ))}\n          </TableRow>\n        </TableHead>\n      </Table>\n    </TableContainer>\n    )}\n  </DataTable>}</>\n  );\n}\n\nexport default List;\n","/home/anish/Documents/workspace/challenge/users-challenge-react/src/redux/reducer/index.js",[],"/home/anish/Documents/workspace/challenge/users-challenge-react/src/redux/action/updateListActionComponent.js",[],"/home/anish/Documents/workspace/challenge/users-challenge-react/src/redux/reducer/updateListReducer.js",[],"/home/anish/Documents/workspace/challenge/users-challenge-react/src/constant/index.js",[],{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":8,"nodeType":"81","messageId":"82","endLine":1,"endColumn":12},{"ruleId":"75","replacedBy":"83"},{"ruleId":"77","replacedBy":"84"},{"ruleId":"79","severity":1,"message":"80","line":1,"column":8,"nodeType":"81","messageId":"82","endLine":1,"endColumn":12},{"ruleId":"79","severity":1,"message":"85","line":95,"column":10,"nodeType":"81","messageId":"82","endLine":95,"endColumn":21},{"ruleId":"86","severity":1,"message":"87","line":96,"column":12,"nodeType":"88","messageId":"89","endLine":96,"endColumn":14},{"ruleId":"86","severity":1,"message":"87","line":127,"column":69,"nodeType":"88","messageId":"89","endLine":127,"endColumn":71},{"ruleId":"90","severity":1,"message":"91","line":128,"column":45,"nodeType":"92","endLine":128,"endColumn":93},{"ruleId":"90","severity":1,"message":"91","line":130,"column":49,"nodeType":"92","endLine":130,"endColumn":97},{"ruleId":"79","severity":1,"message":"93","line":4,"column":34,"nodeType":"81","messageId":"82","endLine":4,"endColumn":42},{"ruleId":"79","severity":1,"message":"94","line":131,"column":9,"nodeType":"81","messageId":"82","endLine":131,"endColumn":16},{"ruleId":"79","severity":1,"message":"95","line":131,"column":18,"nodeType":"81","messageId":"82","endLine":131,"endColumn":28},{"ruleId":"96","severity":1,"message":"97","line":143,"column":4,"nodeType":"98","endLine":143,"endColumn":6,"suggestions":"99"},{"ruleId":"90","severity":1,"message":"91","line":270,"column":69,"nodeType":"92","endLine":270,"endColumn":117},{"ruleId":"90","severity":1,"message":"91","line":270,"column":122,"nodeType":"92","endLine":270,"endColumn":170},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar",["100"],["101"],"'ticker_icon' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'dispatch' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["102"],"no-global-assign","no-unsafe-negation",{"desc":"103","fix":"104"},"Update the dependencies array to be: [dispatch]",{"range":"105","text":"106"},[3316,3318],"[dispatch]"]