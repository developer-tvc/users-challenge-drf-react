{"ast":null,"code":"var _jsxFileName = \"/home/anish/Documents/workspace/challenge/users-challenge-react/src/component/List.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"../logo.svg\";\nimport '../App.css';\nimport { useSelector, useDispatch, dispatch } from 'react-redux';\nimport { getList } from '../redux/action/updateListActionComponent';\nimport { iconAdd } from 'carbon-icons';\nimport { DataTable, Table, TableHead, TableRow, TableHeader, TableBody, TableCell, TableContainer, TableToolbar, TableToolbarContent, TableToolbarSearch, TableToolbarMenu, TableToolbarAction, TableSelectAll, TableSelectRow, TableBatchActions, TableBatchAction, Button } from 'carbon-components-react';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst headers = [{\n  key: 'first_name',\n  header: 'Name'\n}, {\n  key: 'username',\n  header: 'Username'\n}, {\n  key: 'is_superuser',\n  header: 'Superuser'\n}, {\n  key: 'is_staff',\n  header: 'Staff'\n}, {\n  key: 'is_active',\n  header: 'Active'\n}];\n\nfunction batchActionClick(selectedRows) {\n  console.log(selectedRows);\n}\n\nfunction action(act) {\n  console.log(act);\n}\n\nconst List = () => {\n  _s();\n\n  const [rows, setRows] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const dispatch = useDispatch(); //   const[error,setError] = \n\n  const data = useSelector(state => state.updateListReducer.List);\n  console.log(rows);\n  useEffect(() => {\n    dispatch(getList());\n  }, []);\n  useEffect(() => {\n    setRows(data);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: (rows === null || rows === void 0 ? void 0 : rows.length) !== 0 ? /*#__PURE__*/_jsxDEV(DataTable, {\n      rows: rows,\n      headers: headers,\n      children: ({\n        rows,\n        headers,\n        getHeaderProps,\n        getRowProps,\n        getSelectionProps,\n        getToolbarProps,\n        getBatchActionProps,\n        onInputChange,\n        selectedRows,\n        getTableProps,\n        getTableContainerProps\n      }) => /*#__PURE__*/_jsxDEV(TableContainer, {\n        title: \"Users\",\n        children: [/*#__PURE__*/_jsxDEV(TableToolbar, { ...getToolbarProps(),\n          children: [/*#__PURE__*/_jsxDEV(TableBatchActions, { ...getBatchActionProps(),\n            children: [/*#__PURE__*/_jsxDEV(TableBatchAction, {\n              tabIndex: getBatchActionProps().shouldShowBatchActions ? 0 : -1,\n              renderIcon: iconAdd,\n              onClick: batchActionClick(selectedRows),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(TableBatchAction, {\n              tabIndex: getBatchActionProps().shouldShowBatchActions ? 0 : -1,\n              renderIcon: iconAdd,\n              onClick: batchActionClick(selectedRows),\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(TableBatchAction, {\n              tabIndex: getBatchActionProps().shouldShowBatchActions ? 0 : -1,\n              renderIcon: iconAdd,\n              onClick: batchActionClick(selectedRows),\n              children: \"Download\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(TableToolbarContent, {\n            children: [/*#__PURE__*/_jsxDEV(TableToolbarSearch, {\n              onChange: onInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(TableToolbarMenu, {\n              children: [/*#__PURE__*/_jsxDEV(TableToolbarAction, {\n                children: \"Action 1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 120,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TableToolbarAction, {\n                children: \"Action 2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TableToolbarAction, {\n                children: \"Action 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              tabIndex: getBatchActionProps().shouldShowBatchActions ? -1 : 0,\n              onClick: action('Add new row'),\n              size: \"small\",\n              kind: \"primary\",\n              children: \"Add new\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Table, { ...getTableProps(),\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableSelectAll, { ...getSelectionProps()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 13\n              }, this), headers.map(header => /*#__PURE__*/_jsxDEV(TableHeader, { ...getHeaderProps({\n                  header,\n                  isSortable: true\n                }),\n                children: header.header\n              }, header.key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 17\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: rows.map(row => /*#__PURE__*/_jsxDEV(TableRow, { ...getRowProps({\n                row\n              }),\n              children: [/*#__PURE__*/_jsxDEV(TableSelectRow, { ...getSelectionProps({\n                  row\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 17\n              }, this), row.cells.map(cell => /*#__PURE__*/_jsxDEV(TableCell, {\n                children: // console.log(cell.value)\n                [true, false].includes(cell.value) ? cell.value ? /*#__PURE__*/_jsxDEV(\"img\", {\n                  width: \"10\",\n                  height: \"10\",\n                  src: \"/check.png\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 49\n                }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n                  width: \"10\",\n                  height: \"10\",\n                  src: \"/cancel.png\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 161,\n                  columnNumber: 53\n                }, this) : cell.value\n              }, cell.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 19\n              }, this))]\n            }, row.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }, this) : null\n  }, void 0, false);\n};\n\n_s(List, \"dKdYh62YRS6Uk2nqRp482d432cM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/home/anish/Documents/workspace/challenge/users-challenge-react/src/component/List.js"],"names":["useSelector","useDispatch","dispatch","getList","iconAdd","DataTable","Table","TableHead","TableRow","TableHeader","TableBody","TableCell","TableContainer","TableToolbar","TableToolbarContent","TableToolbarSearch","TableToolbarMenu","TableToolbarAction","TableSelectAll","TableSelectRow","TableBatchActions","TableBatchAction","Button","React","useState","useEffect","headers","key","header","batchActionClick","selectedRows","console","log","action","act","List","rows","setRows","loading","setLoading","data","state","updateListReducer","length","getHeaderProps","getRowProps","getSelectionProps","getToolbarProps","getBatchActionProps","onInputChange","getTableProps","getTableContainerProps","shouldShowBatchActions","map","isSortable","row","cells","cell","includes","value","id"],"mappings":";;;;AACA,OAAO,YAAP;AACA,SAASA,WAAT,EAAqBC,WAArB,EAAiCC,QAAjC,QAAiD,aAAjD;AACA,SAASC,OAAT,QAAwB,2CAAxB;AACA,SAASC,OAAT,QAAwB,cAAxB;AAGA,SACEC,SADF,EAEEC,KAFF,EAGEC,SAHF,EAIEC,QAJF,EAKEC,WALF,EAMEC,SANF,EAOEC,SAPF,EAQEC,cARF,EASEC,YATF,EAUEC,mBAVF,EAWEC,kBAXF,EAYEC,gBAZF,EAaEC,kBAbF,EAcEC,cAdF,EAeEC,cAfF,EAgBEC,iBAhBF,EAiBEC,gBAjBF,EAmBEC,MAnBF,QAoBO,yBApBP;AAqBA,OAAOC,KAAP,IAAgBC,QAAhB,EAAyBC,SAAzB,QAA0C,OAA1C;;;AAGA,MAAMC,OAAO,GAAG,CACd;AACEC,EAAAA,GAAG,EAAE,YADP;AAEEC,EAAAA,MAAM,EAAE;AAFV,CADc,EAKd;AACED,EAAAA,GAAG,EAAE,UADP;AAEEC,EAAAA,MAAM,EAAE;AAFV,CALc,EASd;AACED,EAAAA,GAAG,EAAE,cADP;AAEEC,EAAAA,MAAM,EAAE;AAFV,CATc,EAad;AACED,EAAAA,GAAG,EAAE,UADP;AAEEC,EAAAA,MAAM,EAAE;AAFV,CAbc,EAiBd;AACED,EAAAA,GAAG,EAAE,WADP;AAEEC,EAAAA,MAAM,EAAE;AAFV,CAjBc,CAAhB;;AAuBA,SAASC,gBAAT,CAA0BC,YAA1B,EAAuC;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACC;;AAED,SAASG,MAAT,CAAgBC,GAAhB,EAAoB;AAClBH,EAAAA,OAAO,CAACC,GAAR,CAAYE,GAAZ;AACD;;AAID,MAAMC,IAAI,GAAG,MAAI;AAAA;;AACf,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBb,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAK,CAACc,OAAD,EAASC,UAAT,IAAuBf,QAAQ,CAAC,IAAD,CAApC;AACA,QAAMtB,QAAQ,GAAGD,WAAW,EAA5B,CAHe,CAIjB;;AACA,QAAMuC,IAAI,GAAGxC,WAAW,CAACyC,KAAK,IAAEA,KAAK,CAACC,iBAAN,CAAwBP,IAAhC,CAAxB;AACAJ,EAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACAX,EAAAA,SAAS,CAAC,MAAI;AAEdvB,IAAAA,QAAQ,CAACC,OAAO,EAAR,CAAR;AACC,GAHQ,EAGP,EAHO,CAAT;AAIAsB,EAAAA,SAAS,CAAC,MAAI;AACdY,IAAAA,OAAO,CAACG,IAAD,CAAP;AACC,GAFQ,EAEP,CAACA,IAAD,CAFO,CAAT;AAGE,sBAAQ;AAAA,cAAG,CAAAJ,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEO,MAAN,MAAe,CAAf,gBACT,QAAC,SAAD;AAAW,MAAA,IAAI,EAAEP,IAAjB;AAAuB,MAAA,OAAO,EAAEV,OAAhC;AAAA,gBACC,CAAC;AACAU,QAAAA,IADA;AAEAV,QAAAA,OAFA;AAGAkB,QAAAA,cAHA;AAIAC,QAAAA,WAJA;AAKAC,QAAAA,iBALA;AAMAC,QAAAA,eANA;AAOAC,QAAAA,mBAPA;AAQAC,QAAAA,aARA;AASAnB,QAAAA,YATA;AAUAoB,QAAAA,aAVA;AAWAC,QAAAA;AAXA,OAAD,kBAaC,QAAC,cAAD;AAAgB,QAAA,KAAK,EAAC,OAAtB;AAAA,gCACE,QAAC,YAAD,OAAkBJ,eAAe,EAAjC;AAAA,kCACA,QAAC,iBAAD,OAAuBC,mBAAmB,EAA1C;AAAA,oCACI,QAAC,gBAAD;AACE,cAAA,QAAQ,EAAEA,mBAAmB,GAAGI,sBAAtB,GAA+C,CAA/C,GAAmD,CAAC,CADhE;AAEE,cAAA,UAAU,EAAEhD,OAFd;AAGE,cAAA,OAAO,EAAEyB,gBAAgB,CAACC,YAAD,CAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAOI,QAAC,gBAAD;AACE,cAAA,QAAQ,EAAEkB,mBAAmB,GAAGI,sBAAtB,GAA+C,CAA/C,GAAmD,CAAC,CADhE;AAEE,cAAA,UAAU,EAAEhD,OAFd;AAGE,cAAA,OAAO,EAAEyB,gBAAgB,CAACC,YAAD,CAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAPJ,eAaI,QAAC,gBAAD;AACE,cAAA,QAAQ,EAAEkB,mBAAmB,GAAGI,sBAAtB,GAA+C,CAA/C,GAAmD,CAAC,CADhE;AAEE,cAAA,UAAU,EAAEhD,OAFd;AAGE,cAAA,OAAO,EAAEyB,gBAAgB,CAACC,YAAD,CAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAbJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADA,eAqBE,QAAC,mBAAD;AAAA,oCAEE,QAAC,kBAAD;AAAoB,cAAA,QAAQ,EAAEmB;AAA9B;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE,QAAC,gBAAD;AAAA,sCACE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAIE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJF,eAOE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,eAcE,QAAC,MAAD;AACE,cAAA,QAAQ,EAAED,mBAAmB,GAAGI,sBAAtB,GAA+C,CAAC,CAAhD,GAAoD,CADhE;AAEE,cAAA,OAAO,EAAEnB,MAAM,CAAC,aAAD,CAFjB;AAGE,cAAA,IAAI,EAAC,OAHP;AAIE,cAAA,IAAI,EAAC,SAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAdF;AAAA;AAAA;AAAA;AAAA;AAAA,kBArBF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eA6CE,QAAC,KAAD,OAAWiB,aAAa,EAAxB;AAAA,kCACE,QAAC,SAAD;AAAA,mCACE,QAAC,QAAD;AAAA,sCACA,QAAC,cAAD,OAAoBJ,iBAAiB;AAArC;AAAA;AAAA;AAAA;AAAA,sBADA,EAEGpB,OAAO,CAAC2B,GAAR,CAAazB,MAAD,iBACX,QAAC,WAAD,OAAkCgB,cAAc,CAAC;AAAEhB,kBAAAA,MAAF;AAAS0B,kBAAAA,UAAU,EAAE;AAArB,iBAAD,CAAhD;AAAA,0BACG1B,MAAM,CAACA;AADV,iBAAkBA,MAAM,CAACD,GAAzB;AAAA;AAAA;AAAA;AAAA,sBADD,CAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAWE,QAAC,SAAD;AAAA,sBACGS,IAAI,CAACiB,GAAL,CAAUE,GAAD,iBACR,QAAC,QAAD,OAA2BV,WAAW,CAAC;AAAEU,gBAAAA;AAAF,eAAD,CAAtC;AAAA,sCACE,QAAC,cAAD,OAAoBT,iBAAiB,CAAC;AAAES,kBAAAA;AAAF,iBAAD;AAArC;AAAA;AAAA;AAAA;AAAA,sBADF,EAEGA,GAAG,CAACC,KAAJ,CAAUH,GAAV,CAAeI,IAAD,iBACb,QAAC,SAAD;AAAA,0BACE;AACA,iBAAC,IAAD,EAAM,KAAN,EAAaC,QAAb,CAAsBD,IAAI,CAACE,KAA3B,IAC0CF,IAAI,CAACE,KAAL,gBACd;AAAM,kBAAA,KAAK,EAAC,IAAZ;AAAiB,kBAAA,MAAM,EAAC,IAAxB;AAA6B,kBAAA,GAAG,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,wBADc,gBAGV;AAAK,kBAAA,KAAK,EAAC,IAAX;AAAgB,kBAAA,MAAM,EAAC,IAAvB;AAA4B,kBAAA,GAAG,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,wBAJhC,GAMsBF,IAAI,CAACE;AAR7B,iBAAgBF,IAAI,CAACG,EAArB;AAAA;AAAA;AAAA;AAAA,sBADD,CAFH;AAAA,eAAeL,GAAG,CAACK,EAAnB;AAAA;AAAA;AAAA;AAAA,oBADD;AADH;AAAA;AAAA;AAAA;AAAA,kBAXF;AAAA;AAAA;AAAA;AAAA;AAAA,gBA7CF;AAAA;AAAA;AAAA;AAAA;AAAA;AAdF;AAAA;AAAA;AAAA;AAAA,YADS,GAkGR;AAlGK,mBAAR;AAoGD,CAlHD;;GAAMzB,I;UAGalC,W,EAEND,W;;;KALPmC,I;AAoHN,eAAeA,IAAf","sourcesContent":["import logo from '../logo.svg';\nimport '../App.css';\nimport { useSelector,useDispatch,dispatch } from 'react-redux';\nimport { getList } from '../redux/action/updateListActionComponent';\nimport { iconAdd } from 'carbon-icons';\n\n\nimport {\n  DataTable,\n  Table,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableToolbar,\n  TableToolbarContent,\n  TableToolbarSearch,\n  TableToolbarMenu,\n  TableToolbarAction,\n  TableSelectAll,\n  TableSelectRow,\n  TableBatchActions,\n  TableBatchAction,\n\n  Button\n} from 'carbon-components-react';\nimport React, { useState,useEffect } from 'react';\n\n\nconst headers = [\n  {\n    key: 'first_name',\n    header: 'Name',\n  },\n  {\n    key: 'username',\n    header: 'Username',\n  },\n  {\n    key: 'is_superuser',\n    header: 'Superuser',\n  },\n  {\n    key: 'is_staff',\n    header: 'Staff',\n  },\n  {\n    key: 'is_active',\n    header: 'Active',\n  },\n];\n\nfunction batchActionClick(selectedRows){\nconsole.log(selectedRows)\n}\n\nfunction action(act){\n  console.log(act)\n}\n\n\n\nconst List = ()=>{\n  const [rows,setRows] = useState([]);\n  const[loading,setLoading] = useState(true);\n  const dispatch = useDispatch()\n//   const[error,setError] = \nconst data = useSelector(state=>state.updateListReducer.List)\nconsole.log(rows)\nuseEffect(()=>{\n\ndispatch(getList())\n},[])\nuseEffect(()=>{\nsetRows(data)\n},[data])\n  return (<>{rows?.length!==0?\n    <DataTable rows={rows} headers={headers}>\n    {({\n      rows,\n      headers,\n      getHeaderProps,\n      getRowProps,\n      getSelectionProps,\n      getToolbarProps,\n      getBatchActionProps,\n      onInputChange,\n      selectedRows,\n      getTableProps,\n      getTableContainerProps,\n    }) => (\n      <TableContainer title=\"Users\" >\n        <TableToolbar {...getToolbarProps()}>\n        <TableBatchActions {...getBatchActionProps()}>\n            <TableBatchAction\n              tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n              renderIcon={iconAdd}\n              onClick={batchActionClick(selectedRows)}>\n              Delete\n            </TableBatchAction>\n            <TableBatchAction\n              tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n              renderIcon={iconAdd}\n              onClick={batchActionClick(selectedRows)}>\n              Save\n            </TableBatchAction>\n            <TableBatchAction\n              tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n              renderIcon={iconAdd}\n              onClick={batchActionClick(selectedRows)}>\n              Download\n            </TableBatchAction>\n          </TableBatchActions>\n          <TableToolbarContent>\n            {/* pass in `onInputChange` change here to make filtering work */}\n            <TableToolbarSearch onChange={onInputChange} />\n            <TableToolbarMenu>\n              <TableToolbarAction >\n                Action 1\n              </TableToolbarAction>\n              <TableToolbarAction >\n                Action 2\n              </TableToolbarAction>\n              <TableToolbarAction >\n                Action 3\n              </TableToolbarAction>\n            </TableToolbarMenu>\n            <Button\n              tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n              onClick={action('Add new row')}\n              size=\"small\"\n              kind=\"primary\">\n              Add new\n            </Button>\n          </TableToolbarContent>\n        </TableToolbar>\n        <Table {...getTableProps()}>\n          <TableHead>\n            <TableRow>\n            <TableSelectAll {...getSelectionProps()} />\n              {headers.map((header) => (\n                <TableHeader key={header.key} {...getHeaderProps({ header,isSortable: true })}>\n                  {header.header}\n                </TableHeader>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => (\n              <TableRow key={row.id} {...getRowProps({ row })}>\n                <TableSelectRow {...getSelectionProps({ row })} />\n                {row.cells.map((cell) => (\n                  <TableCell key={cell.id}>{\n                    // console.log(cell.value)\n                    [true,false].includes(cell.value) ? (\n                                                              cell.value ? (\n                                                <img  width=\"10\" height=\"10\" src=\"/check.png\" />\n                                                                            ) : (\n                                                    <img width=\"10\" height=\"10\" src=\"/cancel.png\" />\n                                                          )\n                                        ):cell.value\n    \n    \n    \n    \n                  }</TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )}\n  </DataTable>\n    :null}</>\n  );\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}