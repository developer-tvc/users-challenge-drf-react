{"ast":null,"code":"var _jsxFileName = \"/home/anish/Documents/workspace/challenge/users-challenge-react/src/component/List.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"../logo.svg\";\nimport '../App.css';\nimport { useSelector, useDispatch, dispatch } from 'react-redux';\nimport { getList } from '../redux/action/updateListActionComponent';\nimport { iconAdd } from 'carbon-icons';\nimport { DataTable, Table, TableHead, TableRow, TableHeader, TableBody, TableCell, TableContainer, TableToolbar, TableToolbarContent, TableToolbarSearch, TableToolbarMenu, TableToolbarAction, TableSelectAll, TableSelectRow, TableBatchActions, TableBatchAction, Button } from 'carbon-components-react';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction action(act) {\n  console.log(act);\n}\n\nfunction deleteBatch(act) {\n  console.log('in deleteBatch');\n  console.log(act);\n}\n\nfunction deactivateBatch(act) {\n  console.log(' in deactivateBatch');\n  console.log(act);\n}\n\nfunction activateBatch(act) {\n  console.log('in activateBatch ');\n  console.log(act);\n  var activate_list = [];\n  act.forEach(function (user) {\n    activate_list.push(parseInt(user.id));\n  });\n  const requestOptions = {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"list\": activate_list\n    })\n  };\n  fetch('http://127.0.0.1:8000/users/user-activate/', requestOptions); // .then(response => response.json())\n  //       .then(data => this.setState());\n}\n\nconst headers = [{\n  key: 'first_name',\n  header: 'Name'\n}, {\n  key: 'username',\n  header: 'Username'\n}, {\n  key: 'is_superuser',\n  header: 'Superuser'\n}, {\n  key: 'is_staff',\n  header: 'Staff'\n}, {\n  key: 'is_active',\n  header: 'Active'\n}];\n\nconst List = () => {\n  _s();\n\n  const [rows, setRows] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const dispatch = useDispatch(); //   const[error,setError] = \n\n  const data = useSelector(state => state.updateListReducer.List);\n  console.log(rows);\n  useEffect(() => {\n    dispatch(getList());\n  }, []);\n  useEffect(() => {\n    setRows(data);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: (rows === null || rows === void 0 ? void 0 : rows.length) !== 0 ? /*#__PURE__*/_jsxDEV(DataTable, {\n      rows: rows,\n      headers: headers,\n      children: ({\n        rows,\n        headers,\n        getHeaderProps,\n        getRowProps,\n        getSelectionProps,\n        getToolbarProps,\n        getBatchActionProps,\n        onInputChange,\n        selectedRows,\n        getTableProps,\n        getTableContainerProps\n      }) => /*#__PURE__*/_jsxDEV(TableContainer, {\n        title: \"Users\",\n        ...getTableContainerProps(),\n        children: [/*#__PURE__*/_jsxDEV(TableToolbar, { ...getToolbarProps(),\n          children: [/*#__PURE__*/_jsxDEV(TableBatchActions, { ...getBatchActionProps(),\n            children: [/*#__PURE__*/_jsxDEV(TableBatchAction, {\n              tabIndex: getBatchActionProps().shouldShowBatchActions ? 0 : -1,\n              onClick: () => {\n                deleteBatch(selectedRows);\n                dispatch(getList());\n              },\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(TableBatchAction, {\n              tabIndex: getBatchActionProps().shouldShowBatchActions ? 0 : -1,\n              onClick: () => {\n                activateBatch(selectedRows);\n                dispatch(getList());\n              },\n              children: \"Activate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(TableBatchAction, {\n              tabIndex: getBatchActionProps().shouldShowBatchActions ? 0 : -1,\n              onClick: () => {\n                deactivateBatch(selectedRows);\n                dispatch(getList());\n              },\n              children: \"Deactivate\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(TableToolbarContent, {\n            children: [/*#__PURE__*/_jsxDEV(TableToolbarSearch, {\n              persistent: \"true\",\n              tabIndex: getBatchActionProps().shouldShowBatchActions ? -1 : 0,\n              onChange: onInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(TableToolbarMenu, {\n              tabIndex: getBatchActionProps().shouldShowBatchActions ? -1 : 0,\n              children: [/*#__PURE__*/_jsxDEV(TableToolbarAction, {\n                onClick: () => alert('Alert 1'),\n                children: \"Action 1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(TableToolbarAction, {\n                onClick: () => alert('Alert 2'),\n                children: \"Action 2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(TableToolbarAction, {\n                onClick: () => alert('Alert 3'),\n                children: \"Action 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 164,\n                columnNumber: 13\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              tabIndex: getBatchActionProps().shouldShowBatchActions ? -1 : 0,\n              onClick: action('Add new row'),\n              size: \"small\",\n              kind: \"primary\",\n              children: \"Add new\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Table, { ...getTableProps(),\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableSelectAll, { ...getSelectionProps()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 13\n              }, this), headers.map((header, i) => /*#__PURE__*/_jsxDEV(TableHeader, { ...getHeaderProps({\n                  header,\n                  isSortable: true\n                }),\n                children: header.header\n              }, i, false, {\n                fileName: _jsxFileName,\n                lineNumber: 182,\n                columnNumber: 15\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: rows.map((row, i) => /*#__PURE__*/_jsxDEV(TableRow, { ...getRowProps({\n                row\n              }),\n              children: [/*#__PURE__*/_jsxDEV(TableSelectRow, { ...getSelectionProps({\n                  row\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 15\n              }, this), row.cells.map(cell => /*#__PURE__*/_jsxDEV(TableCell, {\n                children: // console.log(cell.value)\n                [true, false].includes(cell.value) ? cell.value ? /*#__PURE__*/_jsxDEV(\"img\", {\n                  width: \"10\",\n                  height: \"10\",\n                  src: \"/check.png\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 197,\n                  columnNumber: 63\n                }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n                  width: \"10\",\n                  height: \"10\",\n                  src: \"/cancel.png\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 199,\n                  columnNumber: 67\n                }, this) : cell.value\n              }, cell.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 34\n              }, this))]\n            }, i, true, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 13\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }, this) : null\n  }, void 0, false);\n};\n\n_s(List, \"dKdYh62YRS6Uk2nqRp482d432cM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/home/anish/Documents/workspace/challenge/users-challenge-react/src/component/List.js"],"names":["useSelector","useDispatch","dispatch","getList","iconAdd","DataTable","Table","TableHead","TableRow","TableHeader","TableBody","TableCell","TableContainer","TableToolbar","TableToolbarContent","TableToolbarSearch","TableToolbarMenu","TableToolbarAction","TableSelectAll","TableSelectRow","TableBatchActions","TableBatchAction","Button","React","useState","useEffect","action","act","console","log","deleteBatch","deactivateBatch","activateBatch","activate_list","forEach","user","push","parseInt","id","requestOptions","method","headers","body","JSON","stringify","fetch","key","header","List","rows","setRows","loading","setLoading","data","state","updateListReducer","length","getHeaderProps","getRowProps","getSelectionProps","getToolbarProps","getBatchActionProps","onInputChange","selectedRows","getTableProps","getTableContainerProps","shouldShowBatchActions","alert","map","i","isSortable","row","cells","cell","includes","value"],"mappings":"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","sourcesContent":["import logo from '../logo.svg';\nimport '../App.css';\nimport { useSelector,useDispatch,dispatch } from 'react-redux';\nimport { getList } from '../redux/action/updateListActionComponent';\nimport { iconAdd } from 'carbon-icons';\n\n\n\nimport {\n  DataTable,\n  Table,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableToolbar,\n  TableToolbarContent,\n  TableToolbarSearch,\n  TableToolbarMenu,\n  TableToolbarAction,\n  TableSelectAll,\n  TableSelectRow,\n  TableBatchActions,\n  TableBatchAction,\n  Button\n} from 'carbon-components-react';\n\nimport React, { useState,useEffect } from 'react';\n\nfunction action(act){\n  console.log(act)\n}\nfunction deleteBatch(act){\n  console.log('in deleteBatch')\n  console.log(act)\n}\nfunction deactivateBatch(act){\n  console.log(' in deactivateBatch')\n  console.log(act)\n\n}\nfunction activateBatch(act){\n  console.log('in activateBatch ')\n  console.log(act)\n  var activate_list = [];\n  act.forEach(function(user){\n    activate_list.push(parseInt(user.id))\n  });\n\n\n  const requestOptions = {\n    method: 'PUT',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify(\n      {\n      \n          \"list\":activate_list\n      })\n  };\n  fetch('http://127.0.0.1:8000/users/user-activate/', requestOptions)\n  // .then(response => response.json())\n  //       .then(data => this.setState());\n\n\n\n}\n\n\n\nconst headers = [\n  {\n    key: 'first_name',\n    header: 'Name',\n  },\n  {\n    key: 'username',\n    header: 'Username',\n  },\n  {\n    key: 'is_superuser',\n    header: 'Superuser',\n  },\n  {\n    key: 'is_staff',\n    header: 'Staff',\n  },\n  {\n    key: 'is_active',\n    header: 'Active',\n  },\n];\n\n\nconst List = ()=>{\n  const [rows,setRows] = useState([]);\n  const[loading,setLoading] = useState(true);\n  const dispatch = useDispatch()\n//   const[error,setError] = \nconst data = useSelector(state=>state.updateListReducer.List)\nconsole.log(rows)\nuseEffect(()=>{\n\ndispatch(getList())\n},[])\nuseEffect(()=>{\nsetRows(data)\n},[data])\n  return (<>{rows?.length!==0?\n    <DataTable rows={rows} headers={headers}>\n    {({\n      rows,\n      headers,\n      getHeaderProps,\n      getRowProps,\n      getSelectionProps,\n      getToolbarProps,\n      getBatchActionProps,\n      onInputChange,\n      selectedRows,\n      getTableProps,\n      getTableContainerProps,\n    }) => (\n      <TableContainer\n      title=\"Users\"\n\n      {...getTableContainerProps()}>\n      <TableToolbar {...getToolbarProps()}>\n        <TableBatchActions {...getBatchActionProps()}>\n          <TableBatchAction\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n            \n            onClick={() => { deleteBatch(selectedRows);dispatch(getList())}}>\n            Delete\n          </TableBatchAction>\n          <TableBatchAction\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n            \n            onClick={() => {activateBatch(selectedRows);dispatch(getList())}}>\n            Activate\n          </TableBatchAction>\n          <TableBatchAction\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? 0 : -1}\n            \n            onClick={() => {deactivateBatch(selectedRows);dispatch(getList())}}>\n            Deactivate\n          </TableBatchAction>\n        </TableBatchActions>\n        <TableToolbarContent>\n          <TableToolbarSearch\n            persistent=\"true\"\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n            onChange={onInputChange}\n          />\n          <TableToolbarMenu\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}>\n            <TableToolbarAction onClick={() => alert('Alert 1')}>\n              Action 1\n            </TableToolbarAction>\n            <TableToolbarAction onClick={() => alert('Alert 2')}>\n              Action 2\n            </TableToolbarAction>\n            <TableToolbarAction onClick={() => alert('Alert 3')}>\n              Action 3\n            </TableToolbarAction>\n          </TableToolbarMenu>\n          <Button\n            tabIndex={getBatchActionProps().shouldShowBatchActions ? -1 : 0}\n            onClick={action('Add new row')}\n            size=\"small\"\n            kind=\"primary\">\n            Add new\n          </Button>\n        </TableToolbarContent>\n      </TableToolbar>\n      <Table {...getTableProps()}>\n        <TableHead>\n          <TableRow>\n            <TableSelectAll {...getSelectionProps()} />\n            {headers.map((header, i) => (\n              <TableHeader key={i} {...getHeaderProps({ header,isSortable: true })}>\n                {header.header}\n              </TableHeader>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {rows.map((row, i) => (\n            <TableRow key={i} {...getRowProps({ row })}>\n              <TableSelectRow {...getSelectionProps({ row })} />\n              {row.cells.map((cell) => (\n                                 <TableCell key={cell.id}>{\n                                  // console.log(cell.value)\n                                  [true,false].includes(cell.value) ? (\n                                                                            cell.value ? (\n                                                              <img  width=\"10\" height=\"10\" src=\"/check.png\" />\n                                                                                          ) : (\n                                                                  <img width=\"10\" height=\"10\" src=\"/cancel.png\" />\n                                                                        )\n                                                      ):cell.value\n                  \n                  \n                  \n                  \n                                }</TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n    )}\n  </DataTable>\n    :null}</>\n  );\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}