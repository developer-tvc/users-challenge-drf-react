{"ast":null,"code":"var _jsxFileName = \"/home/anish/Documents/workspace/challenge/users-challenge-react/src/component/List.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"../logo.svg\";\nimport '../App.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getList } from '../redux/action/updateListActionComponent';\nimport { DataTable, Table, TableHead, TableRow, TableHeader, TableBody, TableCell } from 'carbon-components-react';\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst headers = [{\n  key: 'first_name',\n  header: 'Name'\n}, {\n  key: 'username',\n  header: 'Username'\n}, {\n  key: 'is_superuser',\n  header: 'Superuser'\n}, {\n  key: 'is_staff',\n  header: 'Staff'\n}, {\n  key: 'is_active',\n  header: 'Active'\n}];\n\nconst List = () => {\n  _s();\n\n  const [rows, setRows] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const dispatch = useDispatch(); //   const[error,setError] = \n\n  const data = useSelector(state => state.updateListReducer.List);\n  console.log(rows);\n  useEffect(() => {\n    dispatch(getList());\n  }, []);\n  useEffect(() => {\n    setRows(data);\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: (rows === null || rows === void 0 ? void 0 : rows.length) !== 0 ? /*#__PURE__*/_jsxDEV(DataTable, {\n      rows: rows,\n      headers: headers,\n      children: ({\n        rows,\n        headers,\n        getHeaderProps,\n        getRowProps,\n        getTableProps,\n        onInputChange\n      }) => /*#__PURE__*/_jsxDEV(TableContainer, {\n        title: \"DataTable\",\n        description: \"With filtering\",\n        children: [/*#__PURE__*/_jsxDEV(TableToolbar, {\n          children: /*#__PURE__*/_jsxDEV(TableToolbarContent, {\n            children: [/*#__PURE__*/_jsxDEV(TableToolbarSearch, {\n              onChange: onInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(TableToolbarMenu, {\n              children: [/*#__PURE__*/_jsxDEV(TableToolbarAction, {\n                onClick: action('Action 1 Click'),\n                children: \"Action 1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TableToolbarAction, {\n                onClick: action('Action 2 Click'),\n                children: \"Action 2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(TableToolbarAction, {\n                onClick: action('Action 3 Click'),\n                children: \"Action 3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              onClick: action('Button click'),\n              children: \"Primary Button\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Table, { ...getTableProps(),\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: headers.map(header => /*#__PURE__*/_jsxDEV(TableHeader, { ...getHeaderProps({\n                  header\n                }),\n                children: header.header\n              }, header.key, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 17\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: rows.map(row => /*#__PURE__*/_jsxDEV(TableRow, { ...getRowProps({\n                row\n              }),\n              children: row.cells.map(cell => /*#__PURE__*/_jsxDEV(TableCell, {\n                children: cell.value\n              }, cell.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 19\n              }, this))\n            }, row.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }, this) : null\n  }, void 0, false);\n};\n\n_s(List, \"dKdYh62YRS6Uk2nqRp482d432cM=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = List;\nexport default List;\n\nvar _c;\n\n$RefreshReg$(_c, \"List\");","map":{"version":3,"sources":["/home/anish/Documents/workspace/challenge/users-challenge-react/src/component/List.js"],"names":["useSelector","useDispatch","getList","DataTable","Table","TableHead","TableRow","TableHeader","TableBody","TableCell","React","useState","useEffect","headers","key","header","List","rows","setRows","loading","setLoading","dispatch","data","state","updateListReducer","console","log","length","getHeaderProps","getRowProps","getTableProps","onInputChange","action","map","row","cells","cell","value","id"],"mappings":"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","sourcesContent":["import logo from '../logo.svg';\nimport '../App.css';\nimport { useSelector,useDispatch } from 'react-redux';\nimport { getList } from '../redux/action/updateListActionComponent';\n\n\n\nimport {\n  DataTable,\n  Table,\n  TableHead,\n  TableRow,\n  TableHeader,\n  TableBody,\n  TableCell,\n} from 'carbon-components-react';\nimport React, { useState,useEffect } from 'react';\n\n\nconst headers = [\n  {\n    key: 'first_name',\n    header: 'Name',\n  },\n  {\n    key: 'username',\n    header: 'Username',\n  },\n  {\n    key: 'is_superuser',\n    header: 'Superuser',\n  },\n  {\n    key: 'is_staff',\n    header: 'Staff',\n  },\n  {\n    key: 'is_active',\n    header: 'Active',\n  },\n];\n\n\nconst List = ()=>{\n  const [rows,setRows] = useState([]);\n  const[loading,setLoading] = useState(true);\n  const dispatch = useDispatch()\n//   const[error,setError] = \nconst data = useSelector(state=>state.updateListReducer.List)\nconsole.log(rows)\nuseEffect(()=>{\n\ndispatch(getList())\n},[])\nuseEffect(()=>{\nsetRows(data)\n},[data])\n  return (<>{rows?.length!==0?\n    <DataTable rows={rows} headers={headers}>\n    {({\n      rows,\n      headers,\n      getHeaderProps,\n      getRowProps,\n      getTableProps,\n      onInputChange,\n    }) => (\n      <TableContainer title=\"DataTable\" description=\"With filtering\">\n        <TableToolbar>\n          <TableToolbarContent>\n            {/* pass in `onInputChange` change here to make filtering work */}\n            <TableToolbarSearch onChange={onInputChange} />\n            <TableToolbarMenu>\n              <TableToolbarAction onClick={action('Action 1 Click')}>\n                Action 1\n              </TableToolbarAction>\n              <TableToolbarAction onClick={action('Action 2 Click')}>\n                Action 2\n              </TableToolbarAction>\n              <TableToolbarAction onClick={action('Action 3 Click')}>\n                Action 3\n              </TableToolbarAction>\n            </TableToolbarMenu>\n            <Button onClick={action('Button click')}>Primary Button</Button>\n          </TableToolbarContent>\n        </TableToolbar>\n        <Table {...getTableProps()}>\n          <TableHead>\n            <TableRow>\n              {headers.map((header) => (\n                <TableHeader key={header.key} {...getHeaderProps({ header })}>\n                  {header.header}\n                </TableHeader>\n              ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {rows.map((row) => (\n              <TableRow key={row.id} {...getRowProps({ row })}>\n                {row.cells.map((cell) => (\n                  <TableCell key={cell.id}>{cell.value}</TableCell>\n                ))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    )}\n  </DataTable>\n    :null}</>\n  );\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}